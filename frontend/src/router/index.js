import { createRouter, createWebHistory } from 'vue-router'; import store from '@/store'; import ChangeLogs from '../views/ChangeLogs.vue'; const routes = [{ path: '/', name: 'Dashboard', component: () => import('@/views/Dashboard.vue'), meta: { requiresAuth: true } }, { path: '/login', name: 'Login', component: () => import('@/views/Login.vue') }, { path: '/stores', name: 'StoreManagement', component: () => import('@/views/StoreManagement.vue'), meta: { requiresAuth: true, requiresOwnerOrAdmin: true } }, { path: '/staff', name: 'StaffManagement', component: () => import('@/views/StaffManagement.vue'), meta: { requiresAuth: true, requiresNonStaff: true } }, { path: '/shifts', name: 'ShiftManagement', component: () => import('@/views/ShiftManagement.vue'), meta: { requiresAuth: true } }, { path: '/change-logs', name: 'ChangeLogs', component: ChangeLogs, meta: { requiresAuth: true, requiresOwnerOrAdmin: true } }, { path: '/users', name: 'UserManagement', component: () => import('@/views/UserManagement.vue'), meta: { requiresAuth: true, requiresAdmin: true } }, { path: '/system-settings', name: 'SystemSettings', component: () => import('@/views/SystemSettings.vue'), meta: { requiresAuth: true, requiresOwnerOrAdmin: true } }, { path: '/:pathMatch(.*)*', name: 'NotFound', component: () => import('@/views/NotFound.vue') }]; const router = createRouter({ history: createWebHistory(process.env.BASE_URL), routes }); router.beforeEach((to, from, next) => { const isAuthenticated = store.getters['auth/isAuthenticated']; const currentUser = store.getters['auth/currentUser']; const isAdmin = currentUser && currentUser.role === 'admin'; const isOwner = currentUser && currentUser.role === 'owner'; const isStaff = currentUser && currentUser.role === 'staff'; if (to.matched.some(record => record.meta.requiresAuth) && !isAuthenticated) { next({ name: 'Login' }); return; } if (to.matched.some(record => record.meta.requiresAdmin) && !isAdmin) { next({ name: 'Dashboard' }); return; } if (to.matched.some(record => record.meta.requiresOwnerOrAdmin) && !(isAdmin || isOwner)) { next({ name: 'Dashboard' }); return; } if (to.matched.some(record => record.meta.requiresNonStaff) && isStaff) { next({ name: 'Dashboard' }); return; } if (to.name === 'Login' && isAuthenticated) { next({ name: 'Dashboard' }); return; } next(); }); export default router;
